/***** ====== CAJA 360 - by Copilot ======
 * Ledger de caja, posteo desde ventas/compras pagadas,
 * KPIs mensuales y dashboard "CAJA".
 *
 * Hojas esperadas: FactVentas, FactCompras, Parametros (margen_Empresa, iva_personal_deducible)
 * Hojas creadas: MovimientosCaja, Cuentas, Socios, PagosSocios, AFIP_IVA_Pagos, CAJA, CAJA_DATA
*****/

const H_VENTAS       = 'FactVentas';
const H_COMPRAS      = 'FactCompras';
const H_CAJA         = 'MovimientosCaja';
const H_CUENTAS      = 'Cuentas';
const H_SOCIOS       = 'Socios';
const H_PAGOS_SOCIOS = 'PagosSocios';
const H_AFIP_IVA     = 'AFIP_IVA_Pagos';
const H_PARAM        = 'Parametros';
const H_CAJA_DASH    = 'CAJA';
const H_CAJA_DATA    = 'CAJA_DATA';

function onOpen() {
  SpreadsheetApp.getUi()
    .createMenu('CAJA')
    .addItem('Postear movimientos (pagados)', 'postearMovimientosCaja')
    .addItem('Actualizar dashboard', 'actualizarDashboardCaja')
    .addSeparator()
    .addItem('Reconstruir dashboard (una vez)', 'reconstruirDashboardCaja')
    .addSeparator()
    .addItem('Diagnóstico de estructura', 'diagnosticarEstructura')
    .addToUi();
}

/** === UTILIDADES GENERALES === */
function normalize_(s) { return String(s == null ? '' : s).toLowerCase().trim(); }
function num_(v) { if (typeof v === 'number') return v; const n = parseFloat(String(v).replace(',', '.')); return isNaN(n) ? 0 : n; }
function isYes_(v) { return ['si','sí','true','1','x','ok','yes'].includes(normalize_(v)); }
function isPagado_(v) { return isYes_(v) || ['pagado','pago','paid'].includes(normalize_(v)); }
function firstDay_(d){ const dt=new Date(d); return new Date(dt.getFullYear(), dt.getMonth(), 1); }
function fmtYYYYMM_(d){ const dt=new Date(d), y=dt.getFullYear(), m=('0'+(dt.getMonth()+1)).slice(-2); return `${y}-${m}`; }

function readSheet_(sh){
  if (!sh) return {rows:[], headers:[], map:{}};
  const vs = sh.getDataRange().getValues();
  if (vs.length < 1) return {rows:[], headers:[], map:{}};
  const headers = (vs[0] || []).map(h => String(h));
  const map = {};
  headers.forEach((h,i)=> map[normalize_(h)] = i);
  const rows = vs.length > 1 ? vs.slice(1) : [];   // <-- mantiene headers aunque no haya filas
  return {rows, headers, map};
}
function ensureSheet_(ss, name){ return ss.getSheetByName(name) || ss.insertSheet(name); }
function clearAndSet_(sh, r, c, data){ sh.clear(); sh.getRange(r, c, data.length, data[0].length).setValues(data); }
function leerParametro_(nombre, defVal=0){
  const ss=SpreadsheetApp.getActive(); const sh=ss.getSheetByName(H_PARAM);
  if(!sh) return defVal;
  const vals=sh.getDataRange().getValues();
  for(const row of vals){ if(String(row[0]).trim()===nombre){ const v=row[1]; return (typeof v==='number')?v:num_(v); } }
  return defVal;
}

/** === HOJAS BASE / ESTRUCTURA === */
function ensureEstructuraBase_(){
  const ss=SpreadsheetApp.getActive();

  const shCaja=ensureSheet_(ss, H_CAJA);
  if(shCaja.getLastRow()<1){
    clearAndSet_(shCaja,1,1,[[
      'fecha','mes','cuenta','tipo','categoria','subcategoria','socio_benef','comprobante','neto','iva','total','signo','pagado','observ','llave'
    ]]);
    shCaja.setFrozenRows(1);
  }

  const shCtas=ensureSheet_(ss, H_CUENTAS);
  if(shCtas.getLastRow()<2){
    clearAndSet_(shCtas,1,1,[
      ['cuenta','tipo','incluir_en_caja'],
      ['Banco Galicia','Banco','Sí'],
      ['Mercado Pago','Banco','Sí'],
      ['Efectivo','Efectivo','Sí']
    ]);
    shCtas.setFrozenRows(1);
  }

  const shSoc=ensureSheet_(ss, H_SOCIOS);
  if(shSoc.getLastRow()<2){
    const margenEmp = leerParametro_('margen_Empresa', 0.53);
    clearAndSet_(shSoc,1,1,[
      ['nombre_socio','tipo_socio','porcentaje'],
      ['GUILLE','Socio',0.09],
      ['ABEL','Socio',0.09],
      ['CELE','Socio',0.09],
      ['EMPRESA','Empresa',margenEmp]
    ]);
    shSoc.setFrozenRows(1);
  }

  const shPag=ensureSheet_(ss, H_PAGOS_SOCIOS);
  if(shPag.getLastRow()<1){
    clearAndSet_(shPag,1,1,[['fecha','socio','cuenta_origen','importe','observ']]);
    shPag.setFrozenRows(1);
  }

  const shIVA=ensureSheet_(ss, H_AFIP_IVA);
  if(shIVA.getLastRow()<1){
    clearAndSet_(shIVA,1,1,[['fecha','periodo','concepto','cuenta','importe']]);
    shIVA.setFrozenRows(1);
  }
}

/** === POSTEO DESDE FACTURAS === */
function postearMovimientosCaja(){
  ensureEstructuraBase_();
  const ss=SpreadsheetApp.getActive();
  postearDesde_(ss.getSheetByName(H_VENTAS),  {tipo:'Ingreso', categoria:'Venta',  socioDesdeFila:true});
  postearDesde_(ss.getSheetByName(H_COMPRAS), {tipo:'Egreso',  categoria:'Compra', socioDesdeFila:true});
  SpreadsheetApp.getActive().toast('Posteo completado en MovimientosCaja', 'CAJA', 4);
}

function postearDesde_(sh, cfg){
  if(!sh) return;
  const ss=SpreadsheetApp.getActive();
  const shCaja=ss.getSheetByName(H_CAJA);
  const {rows, headers, map} = readSheet_(sh);

  // helper de sinónimos
  const findCol = (...names) => {
    for (const n of names) { const k = normalize_((n)); if (map[k] != null) return map[k]; }
    return null;
  };

  // === SINÓNIMOS AMPLIOS (ajustados a tus headers) ===
  const colFecha = findCol('fecha','fecha comprobante','fecha_emision','fecha emisión','fecha_factura');
  const colNeto  = findCol('neto_sin_iva','neto sin iva','neto','pesos_sin_iva'); // <-- PESOS_SIN_IVA
  const colIva   = findCol('iva');
  const colIva21 = findCol('iva_21','iva 21','iva21');   // sumo si no hay 'iva'
  const colIva105= findCol('iva_105','iva 10.5','iva 105','iva105');
  const colTotal = findCol('total','total_con_iva','total con iva','importe_total','importe','monto');
  const colPag   = findCol('pagado','pagada','estado','cobrado','pago_estado','esta pagado','está pagado');
  const colCta   = findCol('destino','cuenta_destino','cuenta_pago','cuenta_cobro','cuenta','origen','medio','banco','cartera'); // <-- ORIGEN
  const colComp  = findCol('nro_comprobante','nro_factura','comprobante','nro','numero'); // <-- NRO_FACTURA
  const colSocio = findCol('nombre_socio','socio');

  // Validación (pero mostrando headers reales)
  const faltan = [];
  if (colFecha == null) faltan.push('fecha');
  if (colTotal == null) faltan.push('total');
  if (colPag   == null) faltan.push('pagado/estado');
  if (colCta   == null) faltan.push('destino/cuenta/origen');
  if (faltan.length){
    const msg = `Hoja "${sh.getName()}": faltan columnas mínimas -> ${faltan.join(', ')}.\n`+
                `Headers detectados: ${headers.join(' | ')}`;
    throw new Error(msg);
  }

  // índice 'llave' existente
  const headerCaja = shCaja.getRange(1,1,1,shCaja.getLastColumn()).getValues()[0].map(normalize_);
  const idxLlaveCaja = headerCaja.indexOf('llave');
  const lastRowCaja = shCaja.getLastRow();
  const llavesExist = (idxLlaveCaja>=0 && lastRowCaja>1)
    ? shCaja.getRange(2, idxLlaveCaja+1, lastRowCaja-1, 1).getValues().flat().map(v=>String(v))
    : [];

  const toAppend=[];
  for (let i=0;i<rows.length;i++){
    const r = rows[i];
    const fecha = r[colFecha];
    if (!fecha) continue;

    const pagadoVal = r[colPag];
    if (!isPagado_(pagadoVal)) continue;

    const total = num_(r[colTotal]); if (!total) continue;
    const cuenta = String(r[colCta] ?? '').trim(); if (!cuenta) continue;

    const neto = (colNeto!=null) ? num_(r[colNeto]) : 0;

    // IVA: si no hay 'iva', intento sumar IVA_21 + IVA_105
    let iva = 0;
    if (colIva != null) {
      iva = num_(r[colIva]);
    } else {
      const iva21 = (colIva21!=null) ? num_(r[colIva21]) : 0;
      const iva105= (colIva105!=null)? num_(r[colIva105]): 0;
      iva = iva21 + iva105;
      if (!iva && neto && total) iva = Math.max(total - neto, 0);
    }

    const comp = (colComp!=null) ? String(r[colComp] ?? '') : '';
    const socio= (cfg.socioDesdeFila && colSocio!=null) ? String(r[colSocio] ?? '') : '';

    const tipo = cfg.tipo; // Ingreso/Egreso
    const signo = (tipo==='Ingreso') ? 1 : -1;
    const mes = firstDay_(fecha);

    const llave = [
      sh.getName(),
      Utilities.formatDate(new Date(fecha), Session.getScriptTimeZone(),'yyyy-MM-dd'),
      cuenta, comp, total.toFixed(2), tipo
    ].join('|');

    if (llavesExist.includes(llave)) continue;

    toAppend.push([fecha,mes,cuenta,tipo,cfg.categoria,'',socio,comp,neto,iva,total,signo,'Sí','',llave]);
  }

  if (toAppend.length){
    shCaja.getRange(shCaja.getLastRow()+1,1,toAppend.length,toAppend[0].length).setValues(toAppend);
  } else {
    SpreadsheetApp.getActive().toast(`No hay filas pagadas nuevas en "${sh.getName()}"`, 'CAJA', 4);
  }
}

/** === CÁLCULO KPI Y TABLA MENSUAL === */
function actualizarDashboardCaja(){
  ensureEstructuraBase_();
  const ss=SpreadsheetApp.getActive();

  const ventas   = readSheet_(ss.getSheetByName(H_VENTAS));
  const compras  = readSheet_(ss.getSheetByName(H_COMPRAS));
  const caja     = readSheet_(ss.getSheetByName(H_CAJA));
  const cuentas  = readSheet_(ss.getSheetByName(H_CUENTAS));
  const socios   = readSheet_(ss.getSheetByName(H_SOCIOS));
  const pagosSoc = readSheet_(ss.getSheetByName(H_PAGOS_SOCIOS));
  const afipIVA  = readSheet_(ss.getSheetByName(H_AFIP_IVA));

  const margenEmp   = leerParametro_('margen_Empresa', 0.53);
  const ivaPersonalDef = leerParametro_('iva_personal_deducible', 0.5);

  const V = ventas.map, C = compras.map, M = caja.map;

  // Cuentas incluidas en caja
  const idxCuentaCtas = cuentas.map['cuenta'], idxIncluye = cuentas.map['incluir_en_caja'];
  const cuentasCaja = new Set((cuentas.rows||[]).filter(r=>isYes_(r[idxIncluye])).map(r=>String(r[idxCuentaCtas])));

  // Socios %
  const idxSocNombre = socios.map['nombre_socio'], idxSocPct = socios.map['porcentaje'], idxSocTipo = socios.map['tipo_socio'];
  const sociosPct = {};
  (socios.rows || []).forEach(r=>{
    const n = String(r[idxSocNombre] ?? '').trim(); const p = num_(r[idxSocPct]);
    if (n) sociosPct[n] = p;
  });
  const sociosNombres = Object.keys(sociosPct);

  // Aggregadores
  const months = {};
  const ensureMonth = (d)=>{ const k=fmtYYYYMM_(firstDay_(d)); return months[k]||(months[k]={
    ventas_neto:0, compras_neto:0, ganancia_neta:0,
    iva_debito:0, iva_credito_comp:0, iva_extra:0,
    ingresos_caja:0, egresos_caja:0, neto_caja:0,
    ventas_pend:0, compras_pend:0, pagos_iva:0
  }); };

  // --- Ventas
  if(ventas.rows.length){
    const fFecha=V['fecha'],
          fNeto=(V['neto_sin_iva'] ?? V['neto sin iva'] ?? V['neto']),
          fIva=V['iva'], fTotal=V['total'], fPag=V['pagado'] ?? V['estado'];
    ventas.rows.forEach(r=>{
      const fecha=r[fFecha]; if(!fecha) return;
      const m=ensureMonth(fecha);
      const neto=num_(r[fNeto]);
      const iva =(fIva!=null)?num_(r[fIva]):0;
      const total=(fTotal!=null)?num_(r[fTotal]):(neto+iva);
      m.ventas_neto += neto;
      m.iva_debito  += iva;
      if(!isPagado_(r[fPag])) m.ventas_pend += total;
    });
  }

  // --- Compras (con soporte PESOS_SIN_IVA, IVA_21/IVA_105, personal/iva_deducible_pct)
  if(compras.rows.length){
    const fFecha=C['fecha'],
          fNeto=(C['neto_sin_iva'] ?? C['neto sin iva'] ?? C['neto'] ?? C['pesos_sin_iva']),
          fIva=C['iva'],
          fIva21=C['iva_21'], fIva105=C['iva_105'],
          fTotal=C['total'], fPag=(C['pagado'] ?? C['estado']),
          fPersonal=(C['es_personal'] ?? C['personal']),
          fIvaDedPct=C['iva_deducible_pct'];

    compras.rows.forEach(r=>{
      const fecha=r[fFecha]; if(!fecha) return;
      const m=ensureMonth(fecha);
      const neto=num_(r[fNeto]);
      let iva = (fIva!=null)? num_(r[fIva]) : ( (fIva21!=null?num_(r[fIva21]):0) + (fIva105!=null?num_(r[fIva105]):0) );
      const total=(fTotal!=null)?num_(r[fTotal]):(neto+iva);
      const esPersonal = fPersonal!=null ? isYes_(r[fPersonal]) : false;

      // porcentaje deducible por fila (si existe) o parámetro global
      const pctFila = (fIvaDedPct!=null) ? num_(r[fIvaDedPct]) : null;
      const ivaPct = (pctFila!=null && pctFila>=0 && pctFila<=1) ? pctFila : ivaPersonalDef;

      m.compras_neto += neto;
      if(esPersonal){
        m.iva_credito_comp += iva * ivaPct;
        m.iva_extra       += iva * (1 - ivaPct);
      }else{
        m.iva_credito_comp += iva;
      }
      if(!isPagado_(r[fPag])) m.compras_pend += total;
    });
  }

  // Ganancia neta s/IVA
  Object.values(months).forEach(m=> m.ganancia_neta = m.ventas_neto - m.compras_neto);

  // --- Caja y saldos
  const idxFechaM = M['fecha'], idxCuentaM=M['cuenta'], idxTipoM=M['tipo'], idxTotalM=M['total'], idxSignoM=M['signo'];
  const saldosPorCuenta = {}; const movimientosPorMes = {};
  (caja.rows || []).forEach(r=>{
    const fecha=r[idxFechaM]; if(!fecha) return;
    const cuenta=String(r[idxCuentaM] ?? '').trim();
    const tipo=String(r[idxTipoM] ?? ''); const signo=num_(r[idxSignoM]); const total=num_(r[idxTotalM]);
    const keyMes = fmtYYYYMM_(firstDay_(fecha));
    (movimientosPorMes[keyMes] ||= []).push({cuenta,total,signo,fecha:new Date(fecha)});
    if(cuentasCaja.has(cuenta)){
      const m=ensureMonth(fecha);
      if(tipo==='Ingreso') m.ingresos_caja += total;
      if(tipo==='Egreso')  m.egresos_caja  += total;
      m.neto_caja += total*signo;
    }
    saldosPorCuenta[cuenta] = (saldosPorCuenta[cuenta] || 0) + total*signo;
  });

  // --- Pagos de IVA
  const idxImp=afipIVA.map['importe'], idxConc=afipIVA.map['concepto'], idxF=afipIVA.map['fecha'];
  if(afipIVA.rows.length && idxImp!=null && idxConc!=null && idxF!=null){
    afipIVA.rows.forEach(r=>{
      if(normalize_(r[idxConc])!=='iva') return;
      const fecha=r[idxF]; if(!fecha) return;
      const m=ensureMonth(fecha);
      m.pagos_iva += num_(r[idxImp]);
    });
  }

  // Tabla por mes y saldos cierre
  const allMonths = Object.keys(months).sort();
  const incluirCuenta = (cta)=> cuentasCaja.has(cta);
  const saldoFinMesPorCuenta = {}; const acumuladoCuenta = {}; const todasCuentas = new Set(Object.keys(saldosPorCuenta));
  allMonths.forEach(k=>{
    const movs = (movimientosPorMes[k] || []).sort((a,b)=>a.fecha-b.fecha);
    movs.forEach(mov=>{
      acumuladoCuenta[mov.cuenta] = (acumuladoCuenta[mov.cuenta] || 0) + mov.total*mov.signo;
      todasCuentas.add(mov.cuenta);
    });
    saldoFinMesPorCuenta[k] = {};
    [...todasCuentas].forEach(cta=> saldoFinMesPorCuenta[k][cta] = acumuladoCuenta[cta] || 0);
  });

  // Distribución por socio (mensual y acumulada)
  const pagSocF = pagosSoc.map['fecha'], pagSocSoc = pagosSoc.map['socio'], pagSocImp = pagosSoc.map['importe'];
  const distGanMesPorSocio = {};
  allMonths.forEach(k=>{
    const gMes = months[k].ganancia_neta || 0;
    distGanMesPorSocio[k] = {};
    sociosNombres.forEach(s=> distGanMesPorSocio[k][s] = gMes * (sociosPct[s] || 0));
  });

  const pagosSocByMonth = {};
  if(pagosSoc.rows.length && pagSocF!=null && pagSocSoc!=null && pagSocImp!=null){
    pagosSoc.rows.forEach(r=>{
      const fecha=r[pagSocF]; if(!fecha) return;
      const k = fmtYYYYMM_(firstDay_(fecha));
      (pagosSocByMonth[k] ||= []).push({socio:String(r[pagSocSoc]||'').trim(), importe:num_(r[pagSocImp])});
    });
  }

  const deudaSocAcumPorMesSocio = {}; const acumDistPorSocio = {}; const acumPagPorSocio  = {};
  allMonths.forEach(k=>{
    sociosNombres.forEach(s=>{ acumDistPorSocio[s] = (acumDistPorSocio[s] || 0) + (distGanMesPorSocio[k][s] || 0); });
    (pagosSocByMonth[k] || []).forEach(p=>{ if(!p.socio) return; acumPagPorSocio[p.socio] = (acumPagPorSocio[p.socio] || 0) + p.importe; });
    deudaSocAcumPorMesSocio[k] = {};
    sociosNombres.forEach(s=> deudaSocAcumPorMesSocio[k][s] = (acumDistPorSocio[s] || 0) - (acumPagPorSocio[s] || 0));
  });

  // IVA a pagar y deuda acumulada
  const ivaAPagarMes = {}; allMonths.forEach(k=>{ const m=months[k]; ivaAPagarMes[k] = Math.max(0, (m.iva_debito||0)-(m.iva_credito_comp||0)); });
  const pagosIVAAcumulado = {}; let accIVAPagos = 0; allMonths.forEach(k=>{ accIVAPagos += (months[k].pagos_iva||0); pagosIVAAcumulado[k]=accIVAPagos; });
  const deudaIVAAcumulada = {}; let accIVAApagar = 0; allMonths.forEach(k=>{ accIVAApagar += (ivaAPagarMes[k]||0); deudaIVAAcumulada[k]=accIVAApagar - pagosIVAAcumulado[k]; });

  // === CAJA_DATA
  const dataSh=ensureSheet_(SpreadsheetApp.getActive(), H_CAJA_DATA); dataSh.clear();
  const headers = [
    'Mes','Ingresos Caja','Egresos Caja','Neto Caja',
    'Ventas s/IVA','Compras s/IVA','Ganancia s/IVA',
    'IVA Débito','IVA Crédito','IVA EXTRA','IVA a Pagar','Pagos IVA','Deuda IVA Acum',
    'Ventas Pendientes','Compras Pendientes',
    'Caja Fin de Mes','Banco Galicia Fin de Mes',
    'Ganancia EMPRESA'
  ];
  const sociosNombres = Object.keys(sociosPct);
  sociosNombres.forEach(s=> headers.push(`Deuda ${s}`));
  const data = [headers];

  allMonths.forEach(k=>{
    const m = months[k];
    const saldoCierre = Object.entries(saldoFinMesPorCuenta[k] || {}).reduce((acc,[cta,sal])=> acc + (incluirCuenta(cta) ? (sal||0) : 0),0);
    const saldoBG = ((saldoFinMesPorCuenta[k]||{})['Banco Galicia'] || 0);
    const row = [
      k,
      m.ingresos_caja||0, m.egresos_caja||0, m.neto_caja||0,
      m.ventas_neto||0,   m.compras_neto||0, m.ganancia_neta||0,
      m.iva_debito||0,    m.iva_credito_comp||0, m.iva_extra||0,
      (ivaAPagarMes[k]||0), m.pagos_iva||0, (deudaIVAAcumulada[k]||0),
      m.ventas_pend||0,   m.compras_pend||0,
      saldoCierre, saldoBG,
      (m.ganancia_neta||0)*(margenEmp||0)
    ];
    sociosNombres.forEach(s=> row.push( (deudaSocAcumPorMesSocio[k]?.[s] || 0) ));
    data.push(row);
  });
  dataSh.getRange(1,1,data.length,data[0].length).setValues(data);

  construirOActualizarDashboard_();
}

function reconstruirDashboardCaja(){ ensureEstructuraBase_(); construirOActualizarDashboard_(); }

function construirOActualizarDashboard_(){
  const ss=SpreadsheetApp.getActive();
  const sh=ensureSheet_(ss, H_CAJA_DASH);
  const dataSh=ss.getSheetByName(H_CAJA_DATA);
  if(!dataSh || dataSh.getLastRow()<2){ actualizarDashboardCaja(); return; }
  const lastCol=dataSh.getLastColumn();

  const headers = dataSh.getRange(1,1,1,lastCol).getValues()[0];
  const idxMes         = headers.indexOf('Mes')+1;
  const idxIngresos    = headers.indexOf('Ingresos Caja')+1;
  const idxEgresos     = headers.indexOf('Egresos Caja')+1;
  const idxNeto        = headers.indexOf('Neto Caja')+1;
  const idxVentasNeto  = headers.indexOf('Ventas s/IVA')+1;
  const idxComprasNeto = headers.indexOf('Compras s/IVA')+1;
  const idxGanNeta     = headers.indexOf('Ganancia s/IVA')+1;
  const idxIVADeb      = headers.indexOf('IVA Débito')+1;
  const idxIVACred     = headers.indexOf('IVA Crédito')+1;
  const idxIVAExtra    = headers.indexOf('IVA EXTRA')+1;
  const idxIVAaPagar   = headers.indexOf('IVA a Pagar')+1;
  const idxPagosIVA    = headers.indexOf('Pagos IVA')+1;
  const idxDeudaIVA    = headers.indexOf('Deuda IVA Acum')+1;
  const idxVPend       = headers.indexOf('Ventas Pendientes')+1;
  const idxCPend       = headers.indexOf('Compras Pendientes')+1;
  const idxCajaFin     = headers.indexOf('Caja Fin de Mes')+1;
  const idxGalicia     = headers.indexOf('Banco Galicia Fin de Mes')+1;
  const idxGanEmp      = headers.indexOf('Ganancia EMPRESA')+1;

  const sociosCols = {};
  headers.forEach((h,i)=>{ if(h && String(h).startsWith('Deuda ')){ const nombre=String(h).replace('Deuda ','').trim(); sociosCols[nombre]=i+1; }});

  sh.clear();
  clearAndSet_(sh,1,1,[
    ['CAJA - Dashboard','','','',''],
    ['Corte (Mes YYYY-MM):', `=IFERROR(INDEX('${H_CAJA_DATA}'!A2:A, COUNTA('${H_CAJA_DATA}'!A2:A)), "")`, '', '', 'Cambiar este valor para ver otro mes']
  ]);
  sh.getRange('A1').setFontWeight('bold').setFontSize(14);

  const corteRef = `${H_CAJA_DASH}!B2`;
  const cards = [
    ['Banco Galicia (al corte)',   `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxGalicia)}, ${idxGalicia}, FALSE), ""))`],
    ['Caja Actual (fin de mes)',   `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxCajaFin)}, ${idxCajaFin}, FALSE), ""))`],
    ['Ganancia s/IVA (mes)',       `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxGanNeta)}, ${idxGanNeta}, FALSE), ""))`],
    ['Ganancia EMPRESA (mes)',     `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxGanEmp)}, ${idxGanEmp}, FALSE), ""))`],
    ['Deuda IVA (acum)',           `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxDeudaIVA)}, ${idxDeudaIVA}, FALSE), ""))`],
    ['Deudas Pendientes (Ventas)', `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxVPend)}, ${idxVPend}, FALSE), ""))`],
    ['Deudas Pendientes (Compras)',`=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxCPend)}, ${idxCPend}, FALSE), ""))`],
    ['IVA EXTRA (mes)',            `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(idxIVAExtra)}, ${idxIVAExtra}, FALSE), ""))`],
  ];
  Object.entries(sociosCols).forEach(([socio, colIdx])=>{
    cards.push([`Deuda ${socio}`, `=IF(${corteRef}="", "", IFERROR(VLOOKUP(${corteRef}, ${H_CAJA_DATA}!A:${colLetter_(colIdx)}, ${colIdx}, FALSE), ""))`]);
  });
  sh.getRange(4,1,1,2).setValues([['Indicadores (al corte)','Valor']]).setFontWeight('bold');
  sh.getRange(5,1,cards.length,2).setValues(cards);

  sh.getRange(4,4).setValue('Resumen Mensual').setFontWeight('bold');
  sh.getRange(5,4,1,headers.length).setValues([headers]);
  const dataRange = dataSh.getRange(2,1,dataSh.getLastRow()-1, dataSh.getLastColumn());
  sh.getRange(6,4,dataRange.getNumRows(), dataRange.getNumColumns()).setValues(dataRange.getValues());

  // Totales dinámicos (se adapta al ancho de la tabla)
  const firstDataRow = 6, lastDataRow = 5 + (dataSh.getLastRow()-1), totalsRow = lastDataRow + 2;
  const sumCol = (colIndex) => `=SUM(${cell_(firstDataRow, colIndex, lastDataRow-firstDataRow+1)})`;
  const totals = new Array(headers.length).fill('');
  totals[0] = 'Totales/Acumulados';
  const sumHeaders = new Set([
    'Ingresos Caja','Egresos Caja','Neto Caja',
    'Ventas s/IVA','Compras s/IVA','Ganancia s/IVA',
    'IVA Débito','IVA Crédito','IVA EXTRA','IVA a Pagar',
    'Pagos IVA','Ventas Pendientes','Compras Pendientes',
    'Ganancia EMPRESA'
  ]);
  headers.forEach((h, i) => { if(i===0) return; if(sumHeaders.has(String(h||''))) totals[i] = sumCol(4+i); });
  sh.getRange(totalsRow, 4, 1, headers.length).setValues([totals]);

  sh.autoResizeColumns(1, 8);
  sh.autoResizeColumns(4, headers.length+1);
  sh.setFrozenRows(4);
  SpreadsheetApp.getActive().toast('Dashboard CAJA actualizado', 'CAJA', 4);
}

/*** Helpers A1 ***/
function colLetter_(idx){ let x=idx, s=''; while(x>0){ const m=(x-1)%26; s=String.fromCharCode(65+m)+s; x=Math.floor((x-1)/26); } return s; }
function cell_(r,c,rows=1,cols=1){ const a = colLetter_(c)+String(r); if(rows===1 && cols===1) return a; const b = colLetter_(c+cols-1)+String(r+rows-1); return `${a}:${b}`; }

/** === DIAGNÓSTICO DE ESTRUCTURA === */
function diagnosticarEstructura(){
  const ss=SpreadsheetApp.getActive();
  const shDiag = ensureSheet_(ss, 'DIAGNOSTICO');
  const checks = [];
  function checkHoja(nombre, minCols){
    const sh = ss.getSheetByName(nombre);
    if(!sh){ checks.push([nombre, 'NO EXISTE', '', '']); return; }
    const {headers, map} = readSheet_(sh);
    const faltantes = minCols.filter(h=> map[normalize_(h)] == null);
    checks.push([nombre, 'OK', headers.join(' | '), faltantes.join(' | ')]);
  }
  checkHoja(H_VENTAS,  ['fecha','total','pagado','destino','estado']);
  checkHoja(H_COMPRAS, ['fecha','total','destino','origen','estado','personal']); // acepta ORIGEN
  checkHoja(H_CUENTAS, ['cuenta','incluir_en_caja']);
  checkHoja(H_SOCIOS,  ['nombre_socio','tipo_socio','porcentaje']);
  checkHoja(H_PAGOS_SOCIOS, ['fecha','socio','importe']);
  checkHoja(H_AFIP_IVA, ['fecha','concepto','importe']);
  checkHoja(H_CAJA,    ['fecha','cuenta','tipo','total','signo','llave']);
  checkHoja(H_CAJA_DATA, ['Mes','Ingresos Caja','Egresos Caja']);

  clearAndSet_(shDiag,1,1,[['Hoja','Estado','Headers detectados','Faltan'], ...checks]);
  shDiag.autoResizeColumns(1, 4);
  SpreadsheetApp.getActive().toast('Diagnóstico generado', 'CAJA', 4);
}
